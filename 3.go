package main

import (
	"fmt"
	"sync"
)

//Дана последовательность чисел: 2,4,6,8,10. Найти сумму их
//квадратов(2^2+3^2+4^2…) с использованием конкурентных вычислений.

//Немного меняем код из t2

func t3() {
	//Заранее инициализированная переменная для подсчета суммы
	var sum int
	array := [5]int{2, 4, 6, 8, 10}
	// Канал для передачи результатов
	channel := make(chan int, len(array))

	// Итерируемся по массиву и передаем в горутину числа для вычисления их квадратов.
	for _, num := range array {
		go func(num int) {
			// Передаем квадраты числе в канал
			channel <- num * num
		}(num)
	}
	// В цикле выводим в консоль значения квадратов чисел из канала.
	for i := 0; i < len(array); i++ {
		sum += <-channel
	}
	fmt.Println(sum)
}

func t3_2() {
	//Заранее инициализированная переменная для подсчета суммы
	var sum int
	array := [5]int{2, 4, 6, 8, 10}

	wg := sync.WaitGroup{}
	//Итерация по всем элементам массива array
	for _, num := range array {
		//Добавление одной горутины в очередь
		wg.Add(1)
		go func(num int) {
			//Откладываем сообщение о закрытии функции к ее завершению
			defer wg.Done()
			sum += num * num
		}(num)
	}
	//Ожидаем wg.Done для каждой функции
	wg.Wait()
	fmt.Println(sum)
}
